'use client';

import { useState, useEffect, useRef } from "react";
import Image from "next/image";
import { useRouter, usePathname, useSearchParams } from "next/navigation";

interface Currency {
    code: string;
    flag: string;
    name: string;
}

interface Rates {
    [key: string]: number;
}

interface CurrencyConverterProps {
    initialFromCurrency?: string;
}

export default function CurrencyConverter({ 
    initialFromCurrency = 'USD'
}: CurrencyConverterProps) {
    const searchParams = useSearchParams();
    const router = useRouter();
    const pathname = usePathname();

    const getInitialAmount = () => {
        return 10000;
    };

    const [amount, setAmount] = useState<number>(getInitialAmount());
    const [rates, setRates] = useState<Rates>({});
    const [isLoading, setIsLoading] = useState(true);
    const [isMobile, setIsMobile] = useState(false);
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const [selectedCurrency, setSelectedCurrency] = useState(initialFromCurrency);
    const dropdownRef = useRef<HTMLDivElement>(null);
    const inputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        const fromCurrency = searchParams?.get('fromCurrency');
        if (fromCurrency) {
            setSelectedCurrency(fromCurrency);
        }
    }, [searchParams]);

    const currencies: Currency[] = [
        { code: "USD", flag: "us", name: "USD" },
        { code: "GBP", flag: "gb", name: "GBP" },
        { code: "EUR", flag: "eu", name: "EUR" },
        { code: "CAD", flag: "ca", name: "CAD" },
        { code: "SGD", flag: "sg", name: "SGD" },
        { code: "AUD", flag: "au", name: "AUD" },
        { code: "NZD", flag: "nz", name: "NZD" },
        { code: "JPY", flag: "jp", name: "JPY" },
        { code: "KWD", flag: "kw", name: "KWD" },
        { code: "AED", flag: "ae", name: "AED" },
    ];

    useEffect(() => {
        const fetchRates = async () => {
            try {
                const response = await fetch(
                    "https://7udrjxdbzajtpwodsnnnagxqom0ckvmv.lambda-url.ap-south-1.on.aws/",
                    {
                        method: "GET",
                        headers: {
                            Accept: "application/json",
                        },
                    }
                );
                const data = await response.json();
                if (data.rates) {
                    setRates(data.rates);
                } else {
                    setRates({
                        USD: 0.0115823656,
                        EUR: 0.0106688923,
                        CAD: 0.0165900707,
                        GBP: 0.0089319689,
                        AUD: 0.0183755198,
                        SGD: 0.0154548542,
                        NZD: 0.0201025144,
                        JPY: 1.7214481919,
                        KWD: 0.0035682199,
                        AED: 0.0425434669,
                    });
                }
            } catch (error) {
                console.error("Error fetching rates:", error);
                setRates({
                    USD: 0.0115823656,
                    EUR: 0.0106688923,
                    CAD: 0.0165900707,
                    GBP: 0.0089319689,
                    AUD: 0.0183755198,
                    SGD: 0.0154548542,
                    NZD: 0.0201025144,
                    JPY: 1.7214481919,
                    KWD: 0.0035682199,
                    AED: 0.0425434669,
                });
            } finally {
                setIsLoading(false);
            }
        };
        fetchRates();
    }, []);

    useEffect(() => {
        if (typeof window !== 'undefined') {
            const resizeObserver = new ResizeObserver((entries) => {
                for (let entry of entries) {
                    setIsMobile(entry.contentRect.width <= 768);
                }
            });

            resizeObserver.observe(document.body);
            return () => resizeObserver.disconnect();
        }
    }, []);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (
                dropdownRef.current &&
                !dropdownRef.current.contains(event.target as Node)
            ) {
                setIsDropdownOpen(false);
            }
        };

        if (typeof window !== 'undefined') {
            document.addEventListener("mousedown", handleClickOutside);
            return () => {
                document.removeEventListener("mousedown", handleClickOutside);
            };
        }
    }, []);

    useEffect(() => {
        if (inputRef.current) {
            inputRef.current.focus();
        }
    }, []);

    const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value.replace(/[$,]/g, "").replace(/[^0-9.-]+/g, "") || "0";
        if (value.length <= 12) {
            setAmount(parseFloat(value));
        }
    };

    const getCurrencySymbol = (currencyCode: string): string => {
        const symbols: { [key: string]: string } = {
            USD: "$",
            EUR: "€",
            GBP: "£",
            JPY: "¥",
            AUD: "A$",
            CAD: "C$",
            SGD: "S$",
            NZD: "NZ$",
            KWD: "KD",
            AED: "د.إ",
        };
        return symbols[currencyCode] || currencyCode;
    };

    const formatInUSDIcon = (amount: number): string => {
        const formatter = new Intl.NumberFormat("en-US", {
            minimumFractionDigits: 0,
        });

        return `${getCurrencySymbol(selectedCurrency)} ${formatter.format(amount)}`;
    };

    const calculateInrAmount = (): number => {
        if (!rates[selectedCurrency] || !amount) return 0;
        return amount * (1 / rates[selectedCurrency]);
    };

    const convertedAmount = new Intl.NumberFormat("en-IN", {
        style: "currency",
        currency: "INR",
        minimumFractionDigits: 2,
    }).format(calculateInrAmount());

    const currentRate = isLoading || !rates[selectedCurrency]
        ? "Loading..."
        : (1 / rates[selectedCurrency]).toFixed(3);

    const handleCurrencyChange = (currency: string) => {
        setSelectedCurrency(currency);
        setIsDropdownOpen(false);
        const params = new URLSearchParams();
        params.set('fromCurrency', currency);
        params.set('toCurrency', 'INR');
        router.push(`${pathname}?${params.toString()}`);
    };

    return (
        <div className="max-w-[1200px] p-8 md:p-10 bg-gradient-to-br from-white via-[#d8e0ff] to-[#ffd6f3] rounded-xl">
            <div className={`flex ${isMobile ? 'flex-col' : 'flex-row'} items-center gap-5 w-full`}>
                <div className={`${isMobile ? 'w-full' : 'flex-1'} bg-white p-3 md:p-6 rounded-lg relative`}>
                    <div className="text-sm text-[#505868] mb-2">Amount</div>
                    <div className="flex items-center justify-between gap-2.5">
                        <div className="relative cursor-pointer" onClick={() => setIsDropdownOpen(!isDropdownOpen)} ref={dropdownRef}>
                            <div className="flex items-center gap-1.5">
                                <Image
                                    src={`https://flagcdn.com/w40/${selectedCurrency.toLowerCase() === "eur" ? "eu" : selectedCurrency.substring(0, 2).toLowerCase()}.png`}
                                    alt={selectedCurrency}
                                    width={32}
                                    height={32}
                                    className="rounded-full aspect-square object-cover w-8 h-8"
                                />
                                <span className="text-xl font-semibold">{selectedCurrency}</span>
                                <span className="text-black transition-transform duration-200">▼</span>
                            </div>

                            {isDropdownOpen && (
                                <div className="absolute top-full left-0 mt-2 w-48 bg-white rounded-lg shadow-xl z-10 max-h-[168px] overflow-y-auto">
                                    {currencies.map((currency) => (
                                        <div
                                            key={currency.code}
                                            className="flex items-center gap-2 p-3 hover:bg-gray-50 cursor-pointer"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                handleCurrencyChange(currency.code);
                                            }}
                                        >
                                            <Image
                                                src={`https://flagcdn.com/w40/${currency.flag}.png`}
                                                alt={currency.code}
                                                width={32}
                                                height={32}
                                                className="rounded-full aspect-square object-cover w-8 h-8"
                                            />
                                            <span>{currency.name}</span>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                        <input
                            ref={inputRef}
                            type="text"
                            value={formatInUSDIcon(amount)}
                            onChange={handleAmountChange}
                            className="flex-1 text-right text-xl font-semibold bg-transparent outline-none"
                            aria-label={`Amount in ${selectedCurrency}`}
                        />
                    </div>
                </div>

                <div className={`text-2xl text-[#191B1F] ${isMobile ? 'rotate-90' : ''}`}>→</div>

                <div className={`${isMobile ? 'w-full' : 'flex-1'} bg-white p-3 md:p-6 rounded-lg`}>
                    <div className="text-sm text-[#505868] mb-2">Converted to</div>
                    <div className="flex items-center justify-between gap-2.5">
                        <div className="flex items-center gap-1.5">
                            <Image
                                src="https://flagcdn.com/w40/in.png"
                                alt="INR flag"
                                width={32}
                                height={32}
                                className="rounded-full aspect-square object-cover w-8 h-8"
                            />
                            <span className="text-xl font-semibold">INR</span>
                        </div>
                        <div className="text-xl font-semibold">
                            {isLoading ? "Loading..." : convertedAmount}
                        </div>
                    </div>
                </div>
            </div>

            <div className="mt-8 pl-2">
                <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                    <div>
                        <div className="text-2xl font-semibold text-[#191B1F]">
                            1 {selectedCurrency} = <span className="text-[#216afb]">{currentRate}</span> INR
                        </div>
                        <div className="text-sm text-gray-500 mt-1">
                            Mid market rate as of {new Date().toLocaleDateString("en-US", {
                                day: "2-digit",
                                month: "short",
                                hour: "2-digit",
                                minute: "2-digit",
                                timeZone: "Asia/Kolkata",
                                hour12: false,
                            })} IST
                        </div>
                    </div>
                    <div className="flex items-center gap-4">
                        {/* <div className="text-sm">
                            Receive money at{' '}
                            <span className="text-[#4285f4]">G</span>
                            <span className="text-[#ea4335]">o</span>
                            <span className="text-[#fbbc05]">o</span>
                            <span className="text-[#4285f4]">g</span>
                            <span className="text-[#34a853]">l</span>
                            <span className="text-[#ea4335]">e</span>
                            {' '}rates with Infinity
                        </div> */}
                        <button
                            onClick={() => window.open('https://dashboard.infinityapp.in/auth/signup', '_blank')}
                            className="bg-[#216afb] text-white px-6 py-2 rounded-lg hover:bg-[#4783f9] transition-colors whitespace-nowrap"
                        >
                            Receive money
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
} 
